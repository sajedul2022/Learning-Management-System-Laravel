                ========== Class 01 ===========

1. intall breeze and DB config
2. https://spatie.be/docs/laravel-permission/v5/installation-laravel  //  User Permission set update
3. https://php-flasher.io/laravel                                      // Laravel Flasher setup
4. make model with -mc
    php artisan make:model Lead -mc
    php artisan make:model Course -mc
    php artisan make:model Curriculum -mc
    php artisan make:model Exam -mc
    php artisan make:model Invoice -mc
    php artisan make:model InvoiceItem -mc
    php artisan make:model Attendance -mc
    php artisan make:model Homework -mc
    php artisan make:model Note -mc

5. Database design and migration
    https://app.dbdesigner.net/designer/schema/0-untitled-4b657596-1965-4812-bf18-17bfc38f6388


    ** create each table schema table and field
    ** relation table with others table: curricula table AND  courses table
        $table->foreign('course_id')->references('id')->on('courses')->onDelete('cascade');

                                ========== Class -02 ========

1. model File configaration
    like relation table with others table  :

        public function curriculums(){
            return $this->hasMany(Curriculum::class);
        }


*** create role ***
https://spatie.be/docs/laravel-permission/v5/basic-usage/basic-usage

2. User.php model

use Spatie\Permission\Traits\HasRoles;
    class User extends Authenticatable
    {
        use HasApiTokens, HasFactory, Notifiable , HasRoles;

        //..
    }

7. Database Seeder

    use Spatie\Permission\Models\Role;
    use Spatie\Permission\Models\Permission;

    public function run(){

        $user = new User();
        $user->name = 'Super Admin';
        $user->email = 'super@admin.com';
        $user->password = bcrypt('super@admin.com');
        $user->save();

        $role = Role::create([
            'name'=> 'Super Admin'
        ]);

        $permission = Permission::create([
            'name'=> 'create-admin'
        ]);

        $role->givePermissionTo($permission);
        $permission->assignRole($role);

        $user->assignRole($role);

        //..
    }

    than cli: php artisan migrate:fresh --seed


                            ========== Class -03 ========

1. set up liveeware https://laravel-livewire.com/docs/2.x/quickstart

    composer require livewire/livewire
    and include css and script see documentation

2. flassher implements  https://php-flasher.io/laravel

        use Flasher\Prime\FlasherInterface;

        public function increase(FlasherInterface $flasher, $msg){

                $flasher->addSuccess('Succesfully Increase!'. $msg);
                //..
        }

                    ========== Class 04 ========
1. php artisan make:factory LeadFactory --model=Lead

2. database\factories\LeadFactory.php

    return [
            'name' => $this->faker->name,
            'email' => $this->faker->email,
            'phone' => $this->faker->phoneNumber
        ];
3. Seeder
        Lead::factory(100)->create();

4. php artisan migrate:fresh --seed



** Curriculum factory

1. php artisan make:factory CurriculumFactory --model=Curriculum
  upper step same 1,2,3

** create role
                        === old ====
 // \App\Models\User::factory(10)->create();

        // \App\Models\User::factory()->create([
        //     'name' => 'Test User',
        //     'email' => 'test@example.com',
        // ]);

        // user
        // $user = new User();
        // $user->name = 'Super Admin';
        // $user->email = 'super-admin@lms.com';
        // $user->password = bcrypt('super@admin.com');
        // $user->save();

        $user = User::create([
            'name' => 'Super Admin',
            'email' => 'super-admin@lms.com',
            'password' => bcrypt('password'),
        ]);

        //  user role
        $role = Role::create([
            'name'=> 'Super Admin'
        ]);

        $permission = Permission::create([
            'name'=> 'create-admin'
        ]);

        $role->givePermissionTo($permission);
        $permission->assignRole($role);

        $user->assignRole($role);


        //  Communication role

        $CommunicationRole = Role::create([
            'name'=> 'Communication'
        ]);

        $user = User::create([
            'name' => 'Communication Team',
            'email' => 'communication@lms.com',
            'password' => bcrypt('password'),
        ]);

        $user->assignRole($CommunicationRole);

        // course
        $course = Course::create([
            'name' => 'Laravel',
            'description' => 'Laravel LMS project that shows the Education Busisness logic.',
            'image' => 'http://www.w3.org/2000/svg',
            'image' => 'http://www.w3.org/2000/svg',
            'user_id' => $teacher->id
        ]);

            ============ New formate OOP Code  ============

<?php

namespace Database\Seeders;

// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use App\Models\Course;
use App\Models\Curriculum;
use App\Models\Lead;
use App\Models\User;
use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;

class DatabaseSeeder extends Seeder{

    public function run(){

        $this->create_user_with_role('Super Admin', 'Super Admin', 'super-admin@lms.test');
        $this->create_user_with_role('Communication', 'Communication Team', 'communication@lms.test');
        $teacher = $this->create_user_with_role('Teacher', 'Teacher', 'teacher@lms.test');


        // create leads
        Lead::factory(100)->create();

        $course = Course::create([
            'name' => 'Laravel',
            'description' => 'Laravel is a web application framework with expressive, elegant syntax. We’ve already laid the foundation — freeing you to create without sweating the small things.',
            'image' => 'https://laravel.com/img/logomark.min.svg',
            'user_id' => $teacher->id
        ]);


        Curriculum::factory(10)->create();
    }

    private function create_user_with_role($type, $name, $email){

         $role = Role::create([
                'name'=> $type
            ]);

        $user = User::create([
            'name' => $name,
            'email' => $email,
            'password' => bcrypt('password')
        ]);

        if ($type == 'Super Admin') {
            $permission = Permission::create([
                'name' => 'create-admin'
            ]);
            $role->givePermissionTo($permission);
        }

        $user->assignRole($role);

        return $user;
    }
}


P#4: factory, Role based create multiuser


            ================ Class-05 ===============

** P# 05 Multi User and  Leads show use:livewire
Multi User:
1. Seeder
    $this->create_user_with_role('Leads', 'Leads', 'leads@lms.test');
    php artisan migrate:fresh --seed

2. leads resource Controller make
    php artisan make:controller LeadController --resource
3. web.php
    Route::resource('lead', LeadController::class);

    and Links
        <x-nav-link :href="route('lead.index')" :active="request()->routeIs('lead.index')">
            {{ __('Leads') }}
        </x-nav-link>

4. Leads make index livewire
    php artisan livewire:make LeadIndex

** Lead works
resources\views\lead\index.blade.php
     <livewire:lead-index />  // link to livewire tag
And
resources\views\livewire\lead-index.blade.php
     <h2>Test</h2> // write code to one parent div under any code like table


                ================ Class-06 ===============

** User Role divide and permission: Super admin, Teacher, Leads

1. database\seeders\DatabaseSeeder.php

    $defaultPermissions = ['lead-management', 'create-admin'];
        foreach($defaultPermissions as $permission) {
            Permission::create(['name' => $permission]);
        }

       // and  admin set all permission

    if ($type == 'Super Admin') {

            $role->givePermissionTo(Permission::all());

    }elseif($type == 'Leads') {

            $role->givePermissionTo('lead-management');
        }

php artisan migrate:fresh --seed


2. Check other user hasPermissionTo()
app\Http\Controllers\LeadController.php


     public function index(FlasherInterface $flasher){

        $user = Auth::user();
        $check = $user->hasPermissionTo('lead-management');

        if(!$check) {
            $flasher->addWarning('You are not authorized to access this page');
            return redirect()->route('dashboard');
        }


        return view('lead.index');
    }

3. Set Lead user to lead menu show  and others do not show lead page
resources\views\layouts\navigation.blade.php

    @can('lead-management')
                        <x-nav-link :href="route('lead.index')" :active="request()->routeIs('lead.index')">
                            {{ __('Leads') }}
                        </x-nav-link>
    @endcan

php artisan migrate:fresh --seed

P# 06  User Role and permission: Super admin, Teacher, Leads
